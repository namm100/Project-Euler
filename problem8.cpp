#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <vector>

/*
Find the thirteen adjacent digits in the 1000-digit number that has the 
greatest product
*/

using namespace std;

long get_long(string str) {
	char* pEnd;
	return strtol (str.c_str(), &pEnd, 10);
}

long get_max(vector<long> A) {
	if (A.size() == 0) 
		return 0;
	if (A.size() == 1) 
		return A.at(0);
	long before = A[0];
	for (long i = 1; i < A.size(); i++) {
		if (A.at(i) > before)
			before = A.at(i);
	}
	return before;
}

vector<long> get_prod_segments(string str, int seg_len) {
	long str_len = str.length();
	vector<long> products; 
	for (int i = 0; i <= str_len - seg_len; i++) {
		string seg_str = str.substr(i, seg_len);
		long prod = 1;
		for (int j = 0; j < seg_str.length(); j++) {
			string curr(1, seg_str.at(j));
			long curr_num = get_long(curr);
			prod = prod * curr_num;
		}
		products.push_back(prod);
	}
	return products;

}
int main(int argc, char** argv) {
	string the_string = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
	
	vector <long> products = get_prod_segments(the_string, 13);
	for (int i = 0; i < products.size(); i++) {
		printf("i:%d prod:%ld\n", i, products.at(i));
	}
	long max_val = get_max(products);
	printf("maximum product: %ld\n", max_val);	
	return 0;
}
